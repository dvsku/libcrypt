CMAKE_MINIMUM_REQUIRED (VERSION 3.14)

IF(CMAKE_VERSION VERSION_LESS "3.21.0")
	GET_DIRECTORY_PROPERTY(IS_TOP_LEVEL PARENT_DIRECTORY)
	SET(CRYPT_TOP_LEVEL IS_TOP_LEVEL)
ELSE()
	SET(CRYPT_TOP_LEVEL PROJECT_IS_TOP_LEVEL)
ENDIF()

OPTION(CRYPT_TEST "Build tests" ON)

PROJECT (libcrypt CXX)

SET(CRYPT_ROOT    "${PROJECT_SOURCE_DIR}")
SET(CRYPT_HEADERS "${PROJECT_SOURCE_DIR}/include")

IF(CRYPT_TOP_LEVEL)
	IF(POLICY CMP0135)
		CMAKE_POLICY(SET CMP0135 NEW)
	ENDIF()

	IF(CRYPT_TEST)
		ENABLE_TESTING()
	ENDIF()

	IF(UNIX AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		SET(CMAKE_CXX_STANDARD 20)
		SET(CMAKE_CXX_FLAGS			"-ldl -pthread -Wall -fpic")
		SET(CMAKE_CXX_FLAGS_DEBUG	"-O0")
		SET(CMAKE_CXX_FLAGS_RELEASE "-O2")

		SET(OUTPUT_DIR "binaries/linux/${CMAKE_CXX_COMPILER_ID}/${CMAKE_BUILD_TYPE}")
		STRING(TOLOWER ${OUTPUT_DIR} OUTPUT_DIR_LOWER)
	ELSEIF(MSVC)
		SET(CMAKE_CXX_FLAGS			"/std:c++20 /DWIN32 /D_WINDOWS /W3 /EHsc /GR /GL-")
		SET(CMAKE_CXX_FLAGS_DEBUG	"/Od /Ob0 /RTC1 /Zi")
		SET(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ob2 /DNDEBUG")

		SET(OUTPUT_DIR "binaries/windows/${CMAKE_CXX_COMPILER_ID}/${CMAKE_BUILD_TYPE}")
		STRING(TOLOWER ${OUTPUT_DIR} OUTPUT_DIR_LOWER)
	ENDIF()
ENDIF()

ADD_SUBDIRECTORY("dependencies")
ADD_SUBDIRECTORY("source")

IF(CRYPT_TOP_LEVEL AND CRYPT_TEST)
	ADD_SUBDIRECTORY("test")
ENDIF()